// ###############################################################################
// Common Framework for Computer Graphics Courses at FI MUNI.
//
// Copyright (c) 2021-2022 Visitlab (https://visitlab.fi.muni.cz)
// All rights reserved.
// ################################################################################

#pragma once

// Includes GLAD but prevents the GLFW header from including the OpenGL header.
#define GLFW_INCLUDE_NONE
#include "glad/glad.h"
#include <GLFW/glfw3.h>

// Includes the most common C++ headers.
#include <filesystem>
#include <string>
#include <vector>

// Includes the C++ mathematical definitions.
#define _USE_MATH_DEFINES
#include <math.h>

// Includes configuration helpers.
#include "configuration.h"

/**
 * The base class for all OpenGL windows.
 *
 * @author	<a href="mailto:jan.byska@gmail.com">Jan Byška</a>
 * @author	<a href="mailto:matus.talcik@gmail.com">Matúš Talčík</a>
 */
class IApplication {

  protected:
    /** The current window width. */
    GLsizei width;

    /** The current window height. */
    GLsizei height;

    /** The command-line arguments. */
    std::vector<std::string> arguments;

    /** The configuration loaded from 'configuration.toml' file. Note that the file is generated by CMake. */
    Configuration configuration;

    /** The elapsed time from the beginning (in milliseconds). */
    long double elapsed_time = 0;

    /** The current FPS measured on CPU. */
    float fps_cpu;

    /** The absolute path to framework's folder. Loaded from {@link configuration} if a configuration file is available. */
    std::filesystem::path framework_folder_path;

    /** The absolute path to lecture folder. Loaded from {@link configuration} if a configuration file is available. */
    std::filesystem::path lecture_folder_path;

    /** The application window. */
    GLFWwindow* window = nullptr;

    // ----------------------------------------------------------------------------
    // Constructors & Destructors
    // ----------------------------------------------------------------------------
  public:
    /**
     * Constructs a new @link IApplication with a custom width and height.
     *
     * @param 	initial_width 	The initial width of the window.
     * @param 	initial_height	The initial height of the window.
     * @param 	arguments	  	The command line arguments used to obtain the application directory.
     */
    IApplication(int initial_width, int initial_height, std::vector<std::string> arguments);

    /** The destructor that releases all resources. */
    virtual ~IApplication();

    // ----------------------------------------------------------------------------
    // Input Events
    // ----------------------------------------------------------------------------
    /**
     * This method is invoked when the window size changes.
     * The default implementation updates the @link width and @link height variables.
     *
     * @param 	width 	The new width.
     * @param 	height	The new height.
     */
    virtual void on_resize(int width, int height);

    /**
     * This method is invoked when the mouse cursor is moved.
     * The implementation is left to the child class.
     *
     * @param 	x	The X-coordinate of the cursor relative to the upper-left corner of the window.
     * @param 	y	The Y-coordinate of the cursor relative to the upper-left corner of the window.
     */
    virtual void on_mouse_move(double x, double y) = 0;

    /**
     * This method is invoked when a mouse button is pressed or released.
     * The implementation is left to the child class.
     *
     * @param 	button	The mouse button that was pressed or released.
     * @param 	action	One of GLFW_PRESS or GLFW_RELEASE.
     * @param 	mods  	Bit field describing which modifier keys were held down.
     */
    virtual void on_mouse_button(int button, int action, int mods) = 0;

    /**
     * This method is invoked when a keyboard key is pressed, released, or repeated.
     * The implementation is left to the child class.
     *
     * @param 	key		    The keyboard key that was pressed or released.
     * @param 	scancode	The system-specific scancode of the key.
     * @param 	action  	One of GLFW_PRESS, GLFW_RELEASE or GLFW_REPEAT.
     * @param 	mods		Bit field describing which modifier keys were held down.
     */
    virtual void on_key_pressed(int key, int scancode, int action, int mods) = 0;

    // ----------------------------------------------------------------------------
    // Update
    // ----------------------------------------------------------------------------

    /**
     * This method is invoked from within the infinite OpenGL loop. The purpose of this method is to update the
     * application specific data before rendering the content.
     *
     * @param 	delta	The elapsed time between this and the previous frame (in milliseconds).
     */
    virtual void update(float delta) {
        // Adds the time delta.
        elapsed_time += delta;
        // Computes FPS.
        fps_cpu = 1000 / delta;
    }

    // ----------------------------------------------------------------------------
    // Render
    // ----------------------------------------------------------------------------
    /**
     * This method is invoked from within the infinite OpenGL loop. The main purpose of this method is to
     * render the application specific content.
     */
    virtual void render() = 0;

    // ----------------------------------------------------------------------------
    // GUI
    // ----------------------------------------------------------------------------
    /**
     * This method is invoked from within the infinite OpenGL loop. The main purpose of this method is to
     * render the application specific GUI.
     */
    virtual void render_ui() = 0; // TODO: We can consider moving this to GUI module, I am keeping it here now only for simplicity.

    // ----------------------------------------------------------------------------
    // Methods
    // ----------------------------------------------------------------------------
  public:
    // ----------------------------------------------------------------------------
    // Getters & Setters
    // ----------------------------------------------------------------------------
    /**
     * Returns the current window width.
     *
     * @return	the window width.
     */
    size_t get_width() const;

    /**
     * Returns the current window height
     *
     * @return	the window height.
     */
    size_t get_height() const;

    /** Returns the default path for the framework folder. */
    std::filesystem::path get_framework_folder_path() const;

    /**
     * Sets a new GLFW window corresponding to this application.
     *
     * @param 	window	The GLFW window to set.
     */
    void set_window(GLFWwindow* window);
};
